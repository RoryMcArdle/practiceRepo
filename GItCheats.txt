to clone directory - create directory in Github/ gitlabs, create a README.txt* and copy url

* very important or your repositories will not link correctly

#check that your configs are correct in whatever file you want to place your git directory in.
$ git config --global user.name "Rory"
$ git config --global user.email "r.mcardle@qub.ac.uk"
$ git config --global --list  ( this will show your name and email if done correctly )

in BASH : 
$ git clone http... ( will show your directory being created and linked to your online repo
$ ls  ( to check that repo was made ) 
$ cd ( insert repo name )
$ git status ( returns status of repo ) 
( it should return what branch you are on, that the directory is up to date with online repo and that 
  the working directory is clean with nothing to commit. )

---- GIT COMMANDS ----

git add "" or git stage "" ( adds the file that follows to the staging area where it can be committed )
 
git restore "" ( removes the file from the staging area and removes all changes )

git checkout -- "" ( will remove any changes done in working directory and file will be whatever version was last committed. )

git commit -m "this is the commit comment" ( You can commit any staged changes using this )

git push origin main ( pushes to the first input(online) from the second input(local) )

git pull origin main ( pulls from the first input(online) to the second input(local) )

clear - clears your screen but doesnt affect anything

ls - lists contents of current directory

pwd -lists name of current directory

mkdir "directory" - makes a directory with a given name

rmdir "" - removes given directory if empty

rm "" - deletes a file

rm -rf  "" - deletes a given directory and all attached files

git mv test.txt test1.txt ( renames a file and stages the updated file)

#you can also rename the file outside of git 

#if you do this git will say the old file has been deleted and a new file ahs been added with the same contents and a different name
#This can be "fixed using the following add command to stage your changes

git add -A ( this recursively adds all changes made to the staging area and fixes any issues with the renaming or moving of files ) 

git commit -am "commit message"  ( can be used to skip the staging part of the process when it isnt required, can only be done with tracked files)


TRACKED FILES
Only files which have just been added to the working directory for the first time will not be tracked. 
any file that has been staged and or committed to the repository will be tracked. 
This is true even for files which have since been modified in the working directory with the modified version also being tracked.

git ls-files will give you all tracked files in the current repository

 

* anytime this is used in the name of a file the command line 
will auto fill it with what it thinks is the correct ending of thefile name ex ro* could be roryFile.txt
can get complicated if lots of files have similar names


---- FLAGS ----

-a	Gives all files including hidden . files
-l	gives extra information on each output
-1	lists each output 1 to a line
-i	ignores case (grep)


---- MAKING A FILE ----
 you can make a file using :

echo "this is a file" >> aFile.txt ( will make that file and fill it with the quoted text )

notepad fileName.txt ( will either open the named file or can create one if the file doesnt exist )
